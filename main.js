/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DateSelectorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  outputFormat: "MM/DD/YYYY",
  // Default to US format
  enableAtTrigger: true
  // Enable @ trigger by default
};
var DATE_FORMATS = {
  "US Format (MM/DD/YYYY)": "MM/DD/YYYY",
  "International (YYYY-MM-DD)": "YYYY-MM-DD",
  "UK Format (DD/MM/YYYY)": "DD/MM/YYYY",
  "Short US (MM/DD/YY)": "MM/DD/YY",
  "With Month Name (MMM DD, YYYY)": "MMM DD, YYYY",
  "Long Date (D MMMM YYYY)": "D MMMM YYYY"
};
var LAST_UPDATED = "2025-04-10T12:00:00Z";
var DateSelectorPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.dateSuggester = null;
    this.editorChangeRef = null;
  }
  async onload() {
    console.log("Loading Date Selector Plugin");
    await this.loadSettings();
    this.addSettingTab(new DateSelectorSettingTab(this.app, this));
    if (this.settings.enableAtTrigger) {
      this.setupAtTrigger();
    }
    this.addCommand({
      id: "insert-update-date-command",
      name: "Insert or Update Date (Command)",
      editorCallback: (editor, ctx) => {
        const selectedText = editor.getSelection();
        this.openDateModal(editor, selectedText || null, editor.getCursor(), editor.getCursor());
      }
    });
    this.registerDomEvent(document, "click", (evt) => {
      this.handleClickEvent(evt);
    });
    const currentTime = (/* @__PURE__ */ new Date()).toISOString();
    console.log(`Date Selector Plugin Loaded - Timestamp: ${currentTime}`);
    console.log(`Date Selector Plugin Loaded - Last Updated: ${LAST_UPDATED}`);
    const BUILD_TIMESTAMP = (/* @__PURE__ */ new Date()).toISOString();
    console.log(`Date Selector Plugin Loaded - Build Timestamp: ${BUILD_TIMESTAMP}`);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.log("Loaded settings:", this.settings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    console.log("Saved settings:", this.settings);
  }
  // Helper function to open the modal
  openDateModal(editor, currentDateString, replaceStart, replaceEnd) {
    new DateSelectorModal(
      this.app,
      currentDateString,
      this.settings.outputFormat,
      (newDate) => {
        const formattedDate = `*${newDate}*`;
        editor.replaceRange(formattedDate, replaceStart, replaceEnd);
        const cursorPosition = {
          line: replaceStart.line,
          ch: replaceStart.ch + formattedDate.length
        };
        editor.setCursor(cursorPosition);
      }
    ).open();
  }
  // Helper function to find a date at a given position in text
  findDateAtPosition(line, ch) {
    const dateFormats = [
      /\b\d{4}-\d{2}-\d{2}\b/,
      // YYYY-MM-DD
      /\b\d{2}[-/]\d{2}[-/]\d{4}\b/,
      // MM-DD-YYYY or MM/DD/YYYY
      /\b\d{2}[-/]\d{2}[-/]\d{2}\b/,
      // MM-DD-YY or MM/DD/YY
      /\b\d{1,2}\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s\d{4}\b/i,
      // 1 Jan 2024
      /\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s\d{1,2},?\s\d{4}\b/i,
      // Jan 1, 2024
      /\b\d{2}\.\d{2}\.\d{4}\b/
      // DD.MM.YYYY or MM.DD.YYYY
    ];
    for (const format of dateFormats) {
      const matches = Array.from(line.matchAll(new RegExp(format, "g")));
      for (const match of matches) {
        const dateStart = match.index;
        const dateEnd = dateStart + match[0].length;
        if (ch > dateStart && ch < dateEnd) {
          const hasStartAsterisk = dateStart > 0 && line[dateStart - 1] === "*";
          const hasEndAsterisk = dateEnd < line.length && line[dateEnd] === "*";
          const start = hasStartAsterisk ? dateStart - 1 : dateStart;
          const end = hasEndAsterisk ? dateEnd + 1 : dateEnd;
          const foundDate = line.substring(start, end);
          return { foundDate, start, end };
        }
      }
    }
    return { foundDate: null, start: -1, end: -1 };
  }
  async handleClickEvent(evt) {
    try {
      const target = evt.target;
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view || !target) return;
      const isEditorClick = target.closest(".cm-editor") !== null;
      if (isEditorClick) {
        const editor = view.editor;
        if (!editor) {
          console.log("No editor instance available");
          return;
        }
        const pos = editor.getCursor();
        if (!pos) {
          console.log("Could not get cursor position");
          return;
        }
        try {
          const line = editor.getLine(pos.line);
          if (!line) {
            console.log("No line content at position", pos.line);
            return;
          }
          const { foundDate, start, end } = this.findDateAtPosition(line, pos.ch);
          if (foundDate) {
            evt.preventDefault();
            evt.stopPropagation();
            this.openDateModal(editor, foundDate, { line: pos.line, ch: start }, { line: pos.line, ch: end });
          }
        } catch (lineError) {
          console.error("Error getting line content:", lineError);
        }
      }
    } catch (error) {
      console.error("Error in click handler:", error);
    }
  }
  setupAtTrigger() {
    this.dateSuggester = new DateSuggester(this.app, this);
    this.registerEditorSuggest(this.dateSuggester);
  }
  cleanupAtTrigger() {
    if (this.editorChangeRef) {
      this.app.workspace.offref(this.editorChangeRef);
      this.editorChangeRef = null;
    }
    if (this.dateSuggester) {
      const editorSuggest = this.app.workspace.editorSuggest;
      if (editorSuggest == null ? void 0 : editorSuggest.suggests) {
        const index = editorSuggest.suggests.indexOf(this.dateSuggester);
        if (index > -1) {
          editorSuggest.suggests.splice(index, 1);
        }
      }
      this.dateSuggester.close();
      this.dateSuggester = null;
    }
  }
  // Method to update @ trigger functionality based on settings
  updateAtTriggerState() {
    this.cleanupAtTrigger();
    if (this.settings.enableAtTrigger) {
      this.setupAtTrigger();
    }
  }
  onunload() {
    console.log("Unloading Date Selector Plugin");
    this.cleanupAtTrigger();
    this.app.workspace.trigger("editor-change");
  }
  // Removed the call to `this.trigger` as it is undefined and unnecessary
  checkForTrigger(cursor, editor, file) {
    var _a;
    const triggerInfo = (_a = this.dateSuggester) == null ? void 0 : _a.onTrigger(cursor, editor, file);
    if (triggerInfo) {
      console.log("Trigger info:", triggerInfo);
    }
  }
};
var DateSuggester = class extends import_obsidian.EditorSuggest {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  // Determines if the suggestion modal should open
  onTrigger(cursor, editor, file) {
    const line = editor.getLine(cursor.line);
    if (cursor.ch > 0 && line[cursor.ch - 1] === "@") {
      return {
        start: { line: cursor.line, ch: cursor.ch - 1 },
        // Start before the '@'
        end: { line: cursor.line, ch: cursor.ch },
        // End after the '@'
        query: ""
      };
    }
    return null;
  }
  // Provides the list of suggestions based on the current context
  async getSuggestions(context) {
    const query = context.query.toLowerCase();
    const allSuggestions = [
      { display: "Today", value: (0, import_obsidian.moment)().format(this.plugin.settings.outputFormat), label: "Today" },
      { display: "Tomorrow", value: (0, import_obsidian.moment)().add(1, "day").format(this.plugin.settings.outputFormat), label: "Tomorrow" },
      { display: "Yesterday", value: (0, import_obsidian.moment)().subtract(1, "day").format(this.plugin.settings.outputFormat), label: "Yesterday" },
      { display: "Pick a date...", value: "", label: "PICKER" }
      // Special suggestion
    ];
    return allSuggestions.filter(
      (suggestion) => suggestion.display.toLowerCase().includes(query)
    );
  }
  // Renders how each suggestion item looks in the list
  renderSuggestion(suggestion, el) {
    el.empty();
    el.createEl("div", { text: suggestion.display });
  }
  // Called when the user selects a suggestion
  selectSuggestion(suggestion, evt) {
    if (!this.context) return;
    if (suggestion.label === "PICKER") {
      const editor = this.context.editor;
      const start = this.context.start;
      const end = this.context.end;
      this.plugin.openDateModal(
        editor,
        null,
        // No current date string to pass
        start,
        // Replace the '@' trigger
        end
      );
      this.close();
      return;
    }
    const formattedDate = `*${suggestion.value}*`;
    this.context.editor.replaceRange(
      formattedDate,
      // Use the asterisk-wrapped date
      this.context.start,
      this.context.end
    );
    const newCursorPos = {
      line: this.context.start.line,
      ch: this.context.start.ch + formattedDate.length
    };
    this.context.editor.setCursor(newCursorPos);
    this.close();
  }
};
var DateSelectorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Date Selector Settings" });
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Choose the format for dates when inserting or updating").addDropdown((dropdown) => {
      Object.entries(DATE_FORMATS).forEach(([name, format]) => {
        dropdown.addOption(format, name);
      });
      dropdown.setValue(this.plugin.settings.outputFormat).onChange(async (value) => {
        this.plugin.settings.outputFormat = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Enable @ Symbol Trigger").setDesc("When enabled, typing @ will show a date picker suggestion. When disabled, you can only use the date picker by clicking on existing dates.").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableAtTrigger).onChange(async (value) => {
      this.plugin.settings.enableAtTrigger = value;
      await this.plugin.saveSettings();
      this.plugin.updateAtTriggerState();
    }));
  }
};
var DateSelectorModal = class extends import_obsidian.Modal {
  constructor(app, currentDateString, outputFormat, onSubmit) {
    var _a;
    super(app);
    this.currentDateString = currentDateString;
    this.onSubmit = onSubmit;
    this.outputFormat = outputFormat;
    try {
      const formats = [
        "YYYY-MM-DD",
        "MM-DD-YYYY",
        "MM/DD/YYYY",
        "DD/MM/YYYY",
        "DD.MM.YYYY",
        "MMM DD YYYY",
        "MMM DD, YYYY",
        "D MMM YYYY",
        "MM-DD-YY",
        "MM/DD/YY"
      ];
      const dateStr = ((_a = this.currentDateString) == null ? void 0 : _a.replace(/^\*|\*$/g, "")) || null;
      if (dateStr) {
        const parsedDate = (0, import_obsidian.moment)(dateStr, formats, true);
        if (parsedDate.isValid()) {
          this.selectedDate = parsedDate.format("YYYY-MM-DD");
        } else {
          this.selectedDate = (0, import_obsidian.moment)().format("YYYY-MM-DD");
        }
      } else {
        this.selectedDate = (0, import_obsidian.moment)().format("YYYY-MM-DD");
      }
    } catch (e) {
      console.error("Error parsing date:", e);
      this.selectedDate = (0, import_obsidian.moment)().format("YYYY-MM-DD");
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("date-selector-modal");
    contentEl.createEl("h2", { text: "Select a Date" });
    const dateInput = contentEl.createEl("input", {
      type: "date",
      cls: "date-selector-input"
    });
    dateInput.value = this.selectedDate;
    dateInput.addEventListener("change", (evt) => {
      this.selectedDate = evt.target.value;
    });
    contentEl.createEl("div", { cls: "date-selector-spacing" });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm Date").setCta().onClick(() => {
      if (!this.selectedDate) {
        console.error("No date selected");
        return;
      }
      this.close();
      const formattedDate = (0, import_obsidian.moment)(this.selectedDate).format(this.outputFormat);
      this.onSubmit(formattedDate);
    }));
    dateInput.focus();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
