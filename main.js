/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DateSelectorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  outputFormat: "MM/DD/YYYY"
  // Default to US format
};
var DATE_FORMATS = {
  "US Format (MM/DD/YYYY)": "MM/DD/YYYY",
  "International (YYYY-MM-DD)": "YYYY-MM-DD",
  "UK Format (DD/MM/YYYY)": "DD/MM/YYYY",
  "Short US (MM/DD/YY)": "MM/DD/YY",
  "With Month Name (MMM DD, YYYY)": "MMM DD, YYYY",
  "Long Date (D MMMM YYYY)": "D MMMM YYYY"
};
var DateSelectorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Loading Date Selector Plugin");
    await this.loadSettings();
    this.addSettingTab(new DateSelectorSettingTab(this.app, this));
    const dateSuggester = new DateSuggester(this.app, this);
    this.registerEditorSuggest(dateSuggester);
    
    // Add a keydown event listener to check for triggers on every keypress
    this.registerDomEvent(document, "keydown", (evt) => {
      // Check if @ key is pressed (key code 50 with shift or the @ key directly)
      const isAtSymbol = (evt.key === '@') || (evt.keyCode === 50 && evt.shiftKey);
      
      // For @ symbol, add a small delay to ensure the character is in the editor
      if (isAtSymbol) {
        console.log("@ key detected in keydown!");
        setTimeout(() => {
          dateSuggester.checkForTrigger();
        }, 10);
      } else {
        // For other keys, check immediately
        dateSuggester.checkForTrigger();
      }
    });
    
    // Add keyup handler to catch @ symbols that might be missed by keydown
    this.registerDomEvent(document, "keyup", (evt) => {
      const isAtSymbol = (evt.key === '@') || (evt.keyCode === 50 && evt.shiftKey);
      if (isAtSymbol) {
        console.log("@ key detected in keyup!");
        dateSuggester.checkForTrigger();
      }
    });
    
    // Monitor for input events (catches paste and other input methods)
    this.registerDomEvent(document, "input", (evt) => {
      const target = evt.target;
      // Check if the input is in an editor
      if (target && target.classList && target.classList.contains("cm-content")) {
        console.log("Input event detected in editor");
        // Small delay to ensure content is updated
        setTimeout(() => {
          dateSuggester.checkForTrigger();
        }, 10);
      }
    });
    
    this.addCommand({
      id: "insert-update-date-command",
      name: "Insert or Update Date (Command)",
      editorCallback: (editor, ctx) => {
        const selectedText = editor.getSelection();
        this.openDateModal(editor, selectedText || null, editor.getCursor(), editor.getCursor());
      }
    });
    this.registerDomEvent(document, "click", (evt) => {
      console.log("Click event detected");
      const target = evt.target;
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view || !target) {
        console.log("No view or target found", { hasView: !!view, hasTarget: !!target });
        return;
      }
      const isEditorClick = target.closest(".cm-editor") !== null;
      console.log("Is editor click:", isEditorClick, "Target:", target.tagName, target.className);
      if (isEditorClick) {
        const editor = view.editor;
        console.log("Got editor instance");
        try {
          const clickedText = target.textContent || "";
          console.log("Clicked element text:", clickedText);
          if (!clickedText.trim()) {
            console.log("No text content in clicked element");
            return;
          }
          const cursor = editor.getCursor();
          const pos = editor.posToOffset(cursor);
          if (pos === null) {
            console.log("Could not get position offset");
            return;
          }
          const linePos = editor.offsetToPos(pos);
          const line = editor.getLine(linePos.line);
          
          // Find the date in the clicked text first
          const { foundDate, start, end } = this.findDateAtPosition(line, cursor.ch);
          console.log('Date search in clicked element:', { foundDate, start, end });

          if (foundDate && clickedText.includes(foundDate)) {
            console.log("Found date in clicked element, opening modal");
            evt.preventDefault();
            evt.stopPropagation();
            const dateStart = line.indexOf(foundDate);
            if (dateStart >= 0) {
              this.openDateModal(
                editor,
                foundDate,
                { line: linePos.line, ch: dateStart },
                { line: linePos.line, ch: dateStart + foundDate.length }
              );
            }
          }
        } catch (error) {
          console.error("Error in click handler:", error);
        }
      }
    });
    console.log("Date Selector Plugin Loaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.log("Loaded settings:", this.settings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    console.log("Saved settings:", this.settings);
  }
  // Helper function to open the modal
  openDateModal(editor, currentDateString, replaceStart, replaceEnd) {
    new DateSelectorModal(this.app, currentDateString, this.settings.outputFormat, (newDate) => {
      editor.replaceRange(newDate, replaceStart, replaceEnd);
    }).open();
  }
  // Helper function to find a date at a given position in text
  findDateAtPosition(line, ch) {
    console.log("Finding date in line:", line, "at position:", ch);
    
    // Match common date formats - order matters, more specific first
    const dateFormats = [
        /\b\d{4}-\d{2}-\d{2}\b/, // YYYY-MM-DD
        /\b\d{2}[-/]\d{2}[-/]\d{4}\b/, // MM-DD-YYYY or MM/DD/YYYY
        /\b\d{2}[-/]\d{2}[-/]\d{2}\b/, // MM-DD-YY or MM/DD/YY
        /\b\d{1,2}\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s\d{4}\b/i, // 1 Jan 2024
        /\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s\d{1,2},?\s\d{4}\b/i, // Jan 1, 2024
        /\b\d{2}\.\d{2}\.\d{4}\b/ // DD.MM.YYYY or MM.DD.YYYY
    ];

    for (const format of dateFormats) {
        const matches = Array.from(line.matchAll(new RegExp(format, 'g')));
        
        for (const match of matches) {
            const start = match.index;
            const end = start + match[0].length;
            console.log('Found match:', { match: match[0], start, end, cursorAt: ch });
            
            // Only return a match if the cursor is between characters (not at the edges)
            if (ch > start && ch < end) {
                console.log('Cursor is within match (not at edges)');
                return { foundDate: match[0], start, end };
            }
        }
    }
    
    console.log('No date found at cursor position');
    return { foundDate: null, start: -1, end: -1 };
  }
};
var DateSuggester = class extends import_obsidian.EditorSuggest {
  plugin;
  isSuggesting = false;

  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    // Match the @ character
    this.char = '@';
  }

  // Manual trigger method that can be called on every keypress
  checkForTrigger() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view && view.editor) {
      const cursor = view.editor.getCursor();
      const result = this.onTrigger(cursor, view.editor, view.file);
      
      if (result) {
        this.isSuggesting = true;
        this.trigger(view.editor, view.file, true);
      } else if (this.isSuggesting) {
        this.isSuggesting = false;
        this.close();
      }
    }
  }

  // This tells Obsidian when to trigger the suggestions
  onTrigger(cursor, editor, file) {
    const currentLine = editor.getLine(cursor.line);
    const currentPos = cursor.ch;

    console.log('onTrigger called with:', {
      currentLine,
      cursorPosition: currentPos,
      cursorLine: cursor.line,
      charAtCursor: currentLine[currentPos],
      charBeforeCursor: currentPos > 0 ? currentLine[currentPos - 1] : null,
      fullLineLength: currentLine.length
    });

    // Special case: If we just typed @, check if it's at the cursor position - 1
    if (currentPos > 0 && currentLine[currentPos - 1] === '@') {
      console.log('@ symbol found at cursor-1 position');
      return {
        start: { line: cursor.line, ch: currentPos - 1 },
        end: { line: cursor.line, ch: currentPos },
        query: ''
      };
    }

    // Get text before cursor
    const beforeCursor = currentLine.substring(0, currentPos);
    
    // Find the last @ before cursor position
    const lastAtPos = beforeCursor.lastIndexOf(this.char);
    
    console.log('@ symbol check:', {
      beforeCursor,
      lastAtPos,
      hasAtSymbol: lastAtPos >= 0,
      textAfterAt: lastAtPos >= 0 ? beforeCursor.substring(lastAtPos + 1) : ''
    });

    // If we find an @ before the cursor, trigger
    if (lastAtPos >= 0) {
      // Get the text between @ and cursor for the query
      const query = beforeCursor.substring(lastAtPos + 1);
      
      // Check if there's a space immediately after the @ symbol - dismiss if so
      if (query.startsWith(' ')) {
        console.log('Space after @ found, dismissing suggestion');
        return null;
      }
      
      console.log('Triggering suggestion with query:', query);
      
      return {
        start: { line: cursor.line, ch: lastAtPos },
        end: { line: cursor.line, ch: currentPos },
        query: query
      };
    }

    console.log('Not triggering suggestion');
    return null;
  }

  getSuggestions(context) {
    console.log('Getting suggestions with context:', context);
    // Return a date picker suggestion
    return [{ label: "Pick a date..." }];
  }

  renderSuggestion(suggestion, el) {
    el.setText(suggestion.label);
  }

  selectSuggestion(suggestion, evt) {
    if (!this.context) {
      console.error("Editor context not available in selectSuggestion");
      return;
    }

    const editor = this.context.editor;
    const startPos = this.context.start;
    const endPos = this.context.end;
    
    if (!editor || !startPos || !endPos) {
      console.error("Missing editor context components");
      return;
    }
    
    this.close();
    this.plugin.openDateModal(editor, null, startPos, endPos);
  }
};
var DateSelectorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Date Selector Settings" });
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Choose the format for dates when inserting or updating").addDropdown((dropdown) => {
      Object.entries(DATE_FORMATS).forEach(([name, format]) => {
        dropdown.addOption(format, name);
      });
      dropdown.setValue(this.plugin.settings.outputFormat).onChange(async (value) => {
        this.plugin.settings.outputFormat = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
var DateSelectorModal = class extends import_obsidian.Modal {
  constructor(app, currentDateString, outputFormat, onSubmit) {
    super(app);
    this.currentDateString = currentDateString;
    this.onSubmit = onSubmit;
    this.outputFormat = outputFormat;
    try {
      const formats = [
        "YYYY-MM-DD",
        "MM-DD-YYYY",
        "MM/DD/YYYY",
        "DD/MM/YYYY",
        "DD.MM.YYYY",
        "MMM DD YYYY",
        "MMM DD, YYYY",
        "D MMM YYYY",
        "MM-DD-YY",
        "MM/DD/YY"
      ];
      if (this.currentDateString) {
        const parsedDate = (0, import_obsidian.moment)(this.currentDateString, formats, true);
        if (parsedDate.isValid()) {
          this.selectedDate = parsedDate.format("YYYY-MM-DD");
        } else {
          this.selectedDate = (0, import_obsidian.moment)().format("YYYY-MM-DD");
        }
      } else {
        this.selectedDate = (0, import_obsidian.moment)().format("YYYY-MM-DD");
      }
    } catch (e) {
      console.error("Error parsing date:", e);
      this.selectedDate = (0, import_obsidian.moment)().format("YYYY-MM-DD");
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass('date-selector-modal');
    contentEl.createEl('h2', { text: 'Select a Date' });

    const dateInput = contentEl.createEl('input', { 
        type: 'date', 
        cls: 'date-selector-input'
    });
    dateInput.value = this.selectedDate;

    dateInput.addEventListener('change', (evt) => {
        this.selectedDate = evt.target.value;
    });

    contentEl.createEl('div', { cls: 'date-selector-spacing' });

    new import_obsidian.Setting(contentEl)
        .addButton((btn) =>
            btn
                .setButtonText('Confirm Date')
                .setCta()
                .onClick(() => {
                    if (!this.selectedDate) {
                        console.error("No date selected");
                        return;
                    }
                    this.close();
                    const formattedDate = (0, import_obsidian.moment)(this.selectedDate).format(this.outputFormat);
                    this.onSubmit(formattedDate);
                }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
